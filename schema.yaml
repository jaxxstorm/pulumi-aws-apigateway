---
name: apigateway
types:
  apigateway:index:Route:
    type: object
    properties:
      path:
        type: string
        description: |
          The path on the API that will serve this route.  If not prefixed with `/`,
          then a `/` will be added automatically to the beginning.
      method:
        "$ref": "#/types/apigateway:index:Method"
        description: |
          The REST method of the route to match.  Only valid with `eventHandler` or `data` routes.
      eventHandler:
        "$ref": "/aws/v4.6.0/schema.json#/resources/aws:lambda%2Ffunction:Function"
        description: |
          A Lambda function which will handle the route for the given path and method.
      localPath:
        type: string
        description: |
          The local path on disk to create static S3 resources for.  Files will be uploaded into S3
          objects, and directories will be recursively walked into.
      contentType:
        type: string
        description: |
          The `content-type` to serve the file as.  Only valid when `localPath` points to a file.  If
          `localPath` points to a directory, the content types for all files will be inferred.
      index:
        oneOf:
        - type: string
        - type: boolean
        description: |
          By default a `localPath` hosting static content will also serve 'index.html' in response to a request on a directory.
          To disable this pass `false` or supply a new index document name.
      data:
        "$ref": pulumi.json#/Any
        description: |
          A raw Swagger object to include verbatim in the integration for this path.
      target:
        "$ref": "#/types/apigateway:index:Target"
        description: |
          The target for an integration route (see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html).
    required:
    - path
    description: |
      A route that that APIGateway should accept and forward to some type of destination. All routes
      have an incoming path that they match against.  However, destinations are determined by the kind
      of the route.
  apigateway:index:Target:
    type: object
    properties:
      type:
        "$ref": "#/types/apigateway:index:IntegrationType"
        description: |
          Specifies an API method integration type. The valid value is one of the following:
          
          * `aws`: for integrating the API method request with an AWS service action, including the Lambda
          function-invoking action. With the Lambda function-invoking action, this is referred to as
          the Lambda custom integration. With any other AWS service action, this is known as AWS
          integration.
          
          * `aws_proxy`: for integrating the API method request with the Lambda function-invoking action
          with the client request passed through as-is. This integration is also referred to as the
          Lambda proxy integration.
          
          * `http`: for integrating the API method request with an HTTP endpoint, including a private HTTP
          endpoint within a VPC. This integration is also referred to as the HTTP custom integration.
          
          * `http_proxy`: for integrating the API method request with an HTTP endpoint, including a private
          HTTP endpoint within a VPC, with the client request passed through as-is. This is also
          referred to as the HTTP proxy integration.
          
          * `mock`: for integrating the API method request with API Gateway as a "loop-back" endpoint
          without invoking any backend.
      httpMethod:
        type: string
        const: ANY
        description: |
          Specifies the integration's HTTP method type.  Currently, the only supported type is 'ANY'.
      uri:
        type: string
        description: |
          Specifies Uniform Resource Identifier (URI) of the integration endpoint.
          
          For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL
          according to the RFC-3986 specification, for either standard integration, where
          connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For
          a private HTTP integration, the URI is not used for routing.
          
          For AWS or AWS_PROXY integrations, the URI is of the form
          arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here,
          {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated
          AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS
          service for fast host-name lookup. action can be used for an AWS service action-based API,
          using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to
          a supported action {name} plus any required input parameters. Alternatively, path can be used
          for an AWS service path-based API. The ensuing service_api refers to the path to an AWS
          service resource, including the region of the integrated AWS service, if applicable. For
          example, for integration with the S3 API of GetObject, the uri can be either
          arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or
          arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}.
      connectionType:
        "$ref": "#/types/apigateway:index:IntegrationConnectionType"
        description: |
          The type of the network connection to the integration endpoint. The valid value is `INTERNET`
          for connections through the public routable internet or `VPC_LINK` for private connections
          between API Gateway and a network load balancer in a VPC. The default value is `INTERNET`.
      connectionId:
        type: string
        description: |
          The (id) of the VpcLink used for the integration when connectionType=VPC_LINK and undefined,
          otherwise.
      passthroughBehaviour:
        "$ref": "#/types/apigateway:index:IntegrationPassthroughBehavior"
        description: |
          Specifies how the method request body of an unmapped content type will be passed through the
          integration request to the back end without transformation.
          
          The valid value is one of the following:
          
          * `WHEN_NO_MATCH`: passes the method request body through the integration request to the back end
          without transformation when the method request content type does not match any content type
          associated with the mapping templates defined in the integration request.
          
          * `WHEN_NO_TEMPLATES`: passes the method request body through the integration request to the back
          end without transformation when no mapping template is defined in the integration request. If
          a template is defined when this option is selected, the method request of an unmapped
          content-type will be rejected with an HTTP 415 Unsupported Media Type response.
          
          * `NEVER`: rejects the method request with an HTTP 415 Unsupported Media Type response when
          either the method request content type does not match any content type associated with the
          mapping templates defined in the integration request or no mapping template is defined in the
          integration request.
          
          Defaults to `WHEN_NO_MATCH` if unspecified.
    required:
    - type
    - uri
  apigateway:index:Method:
    type: string
    enum:
    - value: ANY
    - value: GET
    - value: PUT
    - value: POST
    - value: DELETE
    - value: PATCH
    - value: OPTIONS
    - value: HEAD
  apigateway:index:RequestValidator:
    type: string
    enum:
    - value: ALL
    - value: PARAMS_ONLY
    - value: BODY_ONLY
  apigateway:index:APIKeySource:
    type: string
    enum:
    - value: HEADER
    - value: AUTHORIZER
  apigateway:index:IntegrationConnectionType:
    type: string
    enum:
    - value: INTERNET
    - value: VPC_LINK
  apigateway:index:IntegrationType:
    type: string
    enum:
    - value: aws
    - value: aws_proxy
    - value: http
    - value: http_proxy
    - value: mock
  apigateway:index:IntegrationPassthroughBehavior:
    type: string
    enum:
    - value: when_no_match
    - value: when_no_templates
    - value: never
  apigateway:index:SwaggerGatewayResponse:
    type: object
    properties:
      statusCode:
        type: number
      responseTemplates:
        type: object
        additionalProperties:
          type: string
      responseParameters:
        type: object
        additionalProperties:
          type: string
resources:
  apigateway:index:RestAPI:
    isComponent: true
    inputProperties:
      routes:
        type: array
        items:
          "$ref": "#/types/apigateway:index:Route"
        description: |
          Routes to use to initialize the APIGateway.  These will be used to create the Swagger
          specification for the API.

          Either `swaggerString` or `routes` must be specified.
      swaggerString:
        type: string
        description: |
          A Swagger specification already in string form to use to initialize the APIGateway.  Note
          that you must manually provide permission for any route targets to be invoked by API Gateway
          when using `swaggerString`.

          Either `swaggerString` or `routes` must be specified.
      stageName:
        type: string
        description: |
          The stage name for your API. This will get added as a base path to your API url.
      requestValidator:
        "$ref": "#/types/apigateway:index:RequestValidator"
        description: |
          Request Validator specifies the validator to use at the API level. Note method level validators
          override this.
      apiKeySource:
        "$ref": "#/types/apigateway:index:APIKeySource"
        description: |
          The source for the apikey. This can either be a HEADER or AUTHORIZER. If `apiKeyRequired` is
          set to true on a route, and this is not defined the value will default to HEADER.
      staticRoutesBucket:
        "$ref": "/aws/v4.6.0/schema.json#/resources/aws:s3%2Fbucket:Bucket"
        description: |
          Bucket to use for placing resources for static resources.  If not provided a default one will
          be created on your behalf if any `StaticRoute`s are provided.
      gatewayResponses:
        type: object
        additionalProperties:
          "$ref": "#/types/apigateway:index:SwaggerGatewayResponse"
        description: |
          Define custom gateway responses for the API. This can be used to properly enable
          CORS for Lambda Authorizers.
    plainInputs:
    - requestValidator
    - apiKeySource
    - gatewayResponses
    properties:
      url:
        type: string
        description: |
          The URL where the Rest API is exposed.
      api:
        "$ref": "/aws/v4.6.0/schema.json#/resources/aws:apigateway%2FrestApi:RestApi"
        description: |
          The underlying RestAPI resource.
      deployment:
        "$ref": "/aws/v4.6.0/schema.json#/resources/aws:apigateway%2Fdeployment:Deployment"
        description: |
          The underlying Deployment resource.
      stage:
        "$ref": "/aws/v4.6.0/schema.json#/resources/aws:apigateway%2Fstage:Stage"
        description: |
          The underlying Stage resource.
      apiPolicy:
        "$ref": "/aws/v4.6.0/schema.json#/resources/aws:apigateway%2FrestApiPolicy:RestApiPolicy"
        description: |
          The underlying RestAPIPolicy resource.
    required:
    - url
    - api
    - deployment
    - stage
language:
  csharp:
    packageReferences:
      Pulumi: 3.*
      Pulumi.Aws: 4.*
  go:
    generateResourceContainerTypes: true
    importBasePath: github.com/lukehoban/pulumi-package-aws-apigateway/sdk/go/apigateway
  nodejs:
    dependencies:
      "@pulumi/aws": "^4.5.1"
    devDependencies:
      typescript: "^3.7.0"
  python:
    requires:
      pulumi: ">=3.0.0,<4.0.0"
      pulumi-aws: ">=4.0.0,<5.0.0"
