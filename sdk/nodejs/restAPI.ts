// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

import * as aws from "@pulumi/aws";

export class RestAPI extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'apigateway:index:RestAPI';

    /**
     * Returns true if the given object is an instance of RestAPI.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RestAPI {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestAPI.__pulumiType;
    }

    public /*out*/ readonly api!: pulumi.Output<aws.apigateway.RestApi>;
    public /*out*/ readonly apiPolicy!: pulumi.Output<aws.apigateway.RestApiPolicy | undefined>;
    public /*out*/ readonly deployment!: pulumi.Output<aws.apigateway.Deployment>;
    public /*out*/ readonly stage!: pulumi.Output<aws.apigateway.Stage>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a RestAPI resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RestAPIArgs, opts?: pulumi.ComponentResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["apiKeySource"] = args ? args.apiKeySource : undefined;
            inputs["gatewayResponses"] = args ? args.gatewayResponses : undefined;
            inputs["requestValidator"] = args ? args.requestValidator : undefined;
            inputs["routes"] = args ? args.routes : undefined;
            inputs["stageName"] = args ? args.stageName : undefined;
            inputs["staticRoutesBucket"] = args ? args.staticRoutesBucket : undefined;
            inputs["swaggerString"] = args ? args.swaggerString : undefined;
            inputs["api"] = undefined /*out*/;
            inputs["apiPolicy"] = undefined /*out*/;
            inputs["deployment"] = undefined /*out*/;
            inputs["stage"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        } else {
            inputs["api"] = undefined /*out*/;
            inputs["apiPolicy"] = undefined /*out*/;
            inputs["deployment"] = undefined /*out*/;
            inputs["stage"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(RestAPI.__pulumiType, name, inputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a RestAPI resource.
 */
export interface RestAPIArgs {
    readonly apiKeySource?: pulumi.Input<enums.APIKeySource>;
    readonly gatewayResponses?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SwaggerGatewayResponse>}>;
    readonly requestValidator?: pulumi.Input<enums.RequestValidator>;
    readonly routes?: pulumi.Input<pulumi.Input<inputs.Route>[]>;
    readonly stageName?: pulumi.Input<string>;
    readonly staticRoutesBucket?: pulumi.Input<aws.s3.Bucket>;
    readonly swaggerString?: pulumi.Input<string>;
}
