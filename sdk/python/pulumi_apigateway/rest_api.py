# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from ._enums import *
from ._inputs import *
import pulumi_aws

__all__ = ['RestAPI']


class RestAPI(pulumi.ComponentResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_source: Optional[pulumi.Input['APIKeySource']] = None,
                 gateway_responses: Optional[pulumi.Input[Mapping[str, pulumi.Input[pulumi.InputType['SwaggerGatewayResponseArgs']]]]] = None,
                 request_validator: Optional[pulumi.Input['RequestValidator']] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteArgs']]]]] = None,
                 stage_name: Optional[pulumi.Input[str]] = None,
                 static_routes_bucket: Optional[pulumi.Input['pulumi_aws.s3.Bucket']] = None,
                 swagger_string: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a RestAPI resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['APIKeySource'] api_key_source: The source for the apikey. This can either be a HEADER or AUTHORIZER. If `apiKeyRequired` is
               set to true on a route, and this is not defined the value will default to HEADER.
        :param pulumi.Input[Mapping[str, pulumi.Input[pulumi.InputType['SwaggerGatewayResponseArgs']]]] gateway_responses: Define custom gateway responses for the API. This can be used to properly enable
               CORS for Lambda Authorizers.
        :param pulumi.Input['RequestValidator'] request_validator: Request Validator specifies the validator to use at the API level. Note method level validators
               override this.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteArgs']]]] routes: Routes to use to initialize the APIGateway.  These will be used to create the Swagger
               specification for the API.
               
               Either `swaggerString` or `routes` must be specified.
        :param pulumi.Input[str] stage_name: The stage name for your API. This will get added as a base path to your API url.
        :param pulumi.Input['pulumi_aws.s3.Bucket'] static_routes_bucket: Bucket to use for placing resources for static resources.  If not provided a default one will
               be created on your behalf if any `StaticRoute`s are provided.
        :param pulumi.Input[str] swagger_string: A Swagger specification already in string form to use to initialize the APIGateway.  Note
               that you must manually provide permission for any route targets to be invoked by API Gateway
               when using `swaggerString`.
               
               Either `swaggerString` or `routes` must be specified.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['api_key_source'] = api_key_source
            __props__['gateway_responses'] = gateway_responses
            __props__['request_validator'] = request_validator
            __props__['routes'] = routes
            __props__['stage_name'] = stage_name
            __props__['static_routes_bucket'] = static_routes_bucket
            __props__['swagger_string'] = swagger_string
            __props__['api'] = None
            __props__['api_policy'] = None
            __props__['deployment'] = None
            __props__['stage'] = None
            __props__['url'] = None
        super(RestAPI, __self__).__init__(
            'apigateway:index:RestAPI',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def api(self) -> pulumi.Output['pulumi_aws.apigateway.RestApi']:
        """
        The underlying RestAPI resource.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="apiPolicy")
    def api_policy(self) -> pulumi.Output[Optional['pulumi_aws.apigateway.RestApiPolicy']]:
        """
        The underlying RestAPIPolicy resource.
        """
        return pulumi.get(self, "api_policy")

    @property
    @pulumi.getter
    def deployment(self) -> pulumi.Output['pulumi_aws.apigateway.Deployment']:
        """
        The underlying Deployment resource.
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Output['pulumi_aws.apigateway.Stage']:
        """
        The underlying Stage resource.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL where the Rest API is exposed.
        """
        return pulumi.get(self, "url")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

