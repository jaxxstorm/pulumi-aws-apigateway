// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/lambda"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Route struct {
	ContentType  *string          `pulumi:"contentType"`
	Data         interface{}      `pulumi:"data"`
	EventHandler *lambda.Function `pulumi:"eventHandler"`
	Index        interface{}      `pulumi:"index"`
	LocalPath    *string          `pulumi:"localPath"`
	Method       *string          `pulumi:"method"`
	Path         string           `pulumi:"path"`
	Target       *Target          `pulumi:"target"`
}

// RouteInput is an input type that accepts RouteArgs and RouteOutput values.
// You can construct a concrete instance of `RouteInput` via:
//
//          RouteArgs{...}
type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(context.Context) RouteOutput
}

type RouteArgs struct {
	ContentType  pulumi.StringPtrInput `pulumi:"contentType"`
	Data         pulumi.Input          `pulumi:"data"`
	EventHandler lambda.FunctionInput  `pulumi:"eventHandler"`
	Index        pulumi.Input          `pulumi:"index"`
	LocalPath    pulumi.StringPtrInput `pulumi:"localPath"`
	Method       *Method               `pulumi:"method"`
	Path         pulumi.StringInput    `pulumi:"path"`
	Target       TargetPtrInput        `pulumi:"target"`
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (i RouteArgs) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i RouteArgs) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//          RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Route) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) Data() pulumi.AnyOutput {
	return o.ApplyT(func(v Route) interface{} { return v.Data }).(pulumi.AnyOutput)
}

func (o RouteOutput) EventHandler() lambda.FunctionOutput {
	return o.ApplyT(func(v Route) *lambda.Function { return v.EventHandler }).(lambda.FunctionOutput)
}

func (o RouteOutput) Index() pulumi.AnyOutput {
	return o.ApplyT(func(v Route) interface{} { return v.Index }).(pulumi.AnyOutput)
}

func (o RouteOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Route) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Route) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Route) string { return v.Path }).(pulumi.StringOutput)
}

func (o RouteOutput) Target() TargetPtrOutput {
	return o.ApplyT(func(v Route) *Target { return v.Target }).(TargetPtrOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Route {
		return vs[0].([]Route)[vs[1].(int)]
	}).(RouteOutput)
}

type SwaggerGatewayResponse struct {
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	ResponseTemplates  map[string]string `pulumi:"responseTemplates"`
	StatusCode         *float64          `pulumi:"statusCode"`
}

// SwaggerGatewayResponseInput is an input type that accepts SwaggerGatewayResponseArgs and SwaggerGatewayResponseOutput values.
// You can construct a concrete instance of `SwaggerGatewayResponseInput` via:
//
//          SwaggerGatewayResponseArgs{...}
type SwaggerGatewayResponseInput interface {
	pulumi.Input

	ToSwaggerGatewayResponseOutput() SwaggerGatewayResponseOutput
	ToSwaggerGatewayResponseOutputWithContext(context.Context) SwaggerGatewayResponseOutput
}

type SwaggerGatewayResponseArgs struct {
	ResponseParameters pulumi.StringMapInput  `pulumi:"responseParameters"`
	ResponseTemplates  pulumi.StringMapInput  `pulumi:"responseTemplates"`
	StatusCode         pulumi.Float64PtrInput `pulumi:"statusCode"`
}

func (SwaggerGatewayResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SwaggerGatewayResponse)(nil)).Elem()
}

func (i SwaggerGatewayResponseArgs) ToSwaggerGatewayResponseOutput() SwaggerGatewayResponseOutput {
	return i.ToSwaggerGatewayResponseOutputWithContext(context.Background())
}

func (i SwaggerGatewayResponseArgs) ToSwaggerGatewayResponseOutputWithContext(ctx context.Context) SwaggerGatewayResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwaggerGatewayResponseOutput)
}

// SwaggerGatewayResponseMapInput is an input type that accepts SwaggerGatewayResponseMap and SwaggerGatewayResponseMapOutput values.
// You can construct a concrete instance of `SwaggerGatewayResponseMapInput` via:
//
//          SwaggerGatewayResponseMap{ "key": SwaggerGatewayResponseArgs{...} }
type SwaggerGatewayResponseMapInput interface {
	pulumi.Input

	ToSwaggerGatewayResponseMapOutput() SwaggerGatewayResponseMapOutput
	ToSwaggerGatewayResponseMapOutputWithContext(context.Context) SwaggerGatewayResponseMapOutput
}

type SwaggerGatewayResponseMap map[string]SwaggerGatewayResponseInput

func (SwaggerGatewayResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SwaggerGatewayResponse)(nil)).Elem()
}

func (i SwaggerGatewayResponseMap) ToSwaggerGatewayResponseMapOutput() SwaggerGatewayResponseMapOutput {
	return i.ToSwaggerGatewayResponseMapOutputWithContext(context.Background())
}

func (i SwaggerGatewayResponseMap) ToSwaggerGatewayResponseMapOutputWithContext(ctx context.Context) SwaggerGatewayResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwaggerGatewayResponseMapOutput)
}

type SwaggerGatewayResponseOutput struct{ *pulumi.OutputState }

func (SwaggerGatewayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwaggerGatewayResponse)(nil)).Elem()
}

func (o SwaggerGatewayResponseOutput) ToSwaggerGatewayResponseOutput() SwaggerGatewayResponseOutput {
	return o
}

func (o SwaggerGatewayResponseOutput) ToSwaggerGatewayResponseOutputWithContext(ctx context.Context) SwaggerGatewayResponseOutput {
	return o
}

func (o SwaggerGatewayResponseOutput) ResponseParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v SwaggerGatewayResponse) map[string]string { return v.ResponseParameters }).(pulumi.StringMapOutput)
}

func (o SwaggerGatewayResponseOutput) ResponseTemplates() pulumi.StringMapOutput {
	return o.ApplyT(func(v SwaggerGatewayResponse) map[string]string { return v.ResponseTemplates }).(pulumi.StringMapOutput)
}

func (o SwaggerGatewayResponseOutput) StatusCode() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SwaggerGatewayResponse) *float64 { return v.StatusCode }).(pulumi.Float64PtrOutput)
}

type SwaggerGatewayResponseMapOutput struct{ *pulumi.OutputState }

func (SwaggerGatewayResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SwaggerGatewayResponse)(nil)).Elem()
}

func (o SwaggerGatewayResponseMapOutput) ToSwaggerGatewayResponseMapOutput() SwaggerGatewayResponseMapOutput {
	return o
}

func (o SwaggerGatewayResponseMapOutput) ToSwaggerGatewayResponseMapOutputWithContext(ctx context.Context) SwaggerGatewayResponseMapOutput {
	return o
}

func (o SwaggerGatewayResponseMapOutput) MapIndex(k pulumi.StringInput) SwaggerGatewayResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SwaggerGatewayResponse {
		return vs[0].(map[string]SwaggerGatewayResponse)[vs[1].(string)]
	}).(SwaggerGatewayResponseOutput)
}

type Target struct {
	ConnectionId         *string `pulumi:"connectionId"`
	ConnectionType       *string `pulumi:"connectionType"`
	HttpMethod           *string `pulumi:"httpMethod"`
	PassthroughBehaviour *string `pulumi:"passthroughBehaviour"`
	Type                 string  `pulumi:"type"`
	Uri                  string  `pulumi:"uri"`
}

// TargetInput is an input type that accepts TargetArgs and TargetOutput values.
// You can construct a concrete instance of `TargetInput` via:
//
//          TargetArgs{...}
type TargetInput interface {
	pulumi.Input

	ToTargetOutput() TargetOutput
	ToTargetOutputWithContext(context.Context) TargetOutput
}

type TargetArgs struct {
	ConnectionId         pulumi.StringPtrInput           `pulumi:"connectionId"`
	ConnectionType       *IntegrationConnectionType      `pulumi:"connectionType"`
	HttpMethod           pulumi.StringPtrInput           `pulumi:"httpMethod"`
	PassthroughBehaviour *IntegrationPassthroughBehavior `pulumi:"passthroughBehaviour"`
	Type                 IntegrationType                 `pulumi:"type"`
	Uri                  pulumi.StringInput              `pulumi:"uri"`
}

func (TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Target)(nil)).Elem()
}

func (i TargetArgs) ToTargetOutput() TargetOutput {
	return i.ToTargetOutputWithContext(context.Background())
}

func (i TargetArgs) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOutput)
}

func (i TargetArgs) ToTargetPtrOutput() TargetPtrOutput {
	return i.ToTargetPtrOutputWithContext(context.Background())
}

func (i TargetArgs) ToTargetPtrOutputWithContext(ctx context.Context) TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOutput).ToTargetPtrOutputWithContext(ctx)
}

// TargetPtrInput is an input type that accepts TargetArgs, TargetPtr and TargetPtrOutput values.
// You can construct a concrete instance of `TargetPtrInput` via:
//
//          TargetArgs{...}
//
//  or:
//
//          nil
type TargetPtrInput interface {
	pulumi.Input

	ToTargetPtrOutput() TargetPtrOutput
	ToTargetPtrOutputWithContext(context.Context) TargetPtrOutput
}

type targetPtrType TargetArgs

func TargetPtr(v *TargetArgs) TargetPtrInput {
	return (*targetPtrType)(v)
}

func (*targetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (i *targetPtrType) ToTargetPtrOutput() TargetPtrOutput {
	return i.ToTargetPtrOutputWithContext(context.Background())
}

func (i *targetPtrType) ToTargetPtrOutputWithContext(ctx context.Context) TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetPtrOutput)
}

type TargetOutput struct{ *pulumi.OutputState }

func (TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Target)(nil)).Elem()
}

func (o TargetOutput) ToTargetOutput() TargetOutput {
	return o
}

func (o TargetOutput) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return o
}

func (o TargetOutput) ToTargetPtrOutput() TargetPtrOutput {
	return o.ToTargetPtrOutputWithContext(context.Background())
}

func (o TargetOutput) ToTargetPtrOutputWithContext(ctx context.Context) TargetPtrOutput {
	return o.ApplyT(func(v Target) *Target {
		return &v
	}).(TargetPtrOutput)
}
func (o TargetOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Target) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

func (o TargetOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Target) *string { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

func (o TargetOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Target) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

func (o TargetOutput) PassthroughBehaviour() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Target) *string { return v.PassthroughBehaviour }).(pulumi.StringPtrOutput)
}

func (o TargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Target) string { return v.Type }).(pulumi.StringOutput)
}

func (o TargetOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v Target) string { return v.Uri }).(pulumi.StringOutput)
}

type TargetPtrOutput struct{ *pulumi.OutputState }

func (TargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (o TargetPtrOutput) ToTargetPtrOutput() TargetPtrOutput {
	return o
}

func (o TargetPtrOutput) ToTargetPtrOutputWithContext(ctx context.Context) TargetPtrOutput {
	return o
}

func (o TargetPtrOutput) Elem() TargetOutput {
	return o.ApplyT(func(v *Target) Target { return *v }).(TargetOutput)
}

func (o TargetPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

func (o TargetPtrOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionType
	}).(pulumi.StringPtrOutput)
}

func (o TargetPtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) *string {
		if v == nil {
			return nil
		}
		return v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

func (o TargetPtrOutput) PassthroughBehaviour() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) *string {
		if v == nil {
			return nil
		}
		return v.PassthroughBehaviour
	}).(pulumi.StringPtrOutput)
}

func (o TargetPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func (o TargetPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(SwaggerGatewayResponseOutput{})
	pulumi.RegisterOutputType(SwaggerGatewayResponseMapOutput{})
	pulumi.RegisterOutputType(TargetOutput{})
	pulumi.RegisterOutputType(TargetPtrOutput{})
}
